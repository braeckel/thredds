/* Copyright 2012, UCAR/Unidata.
   See the LICENSE file for more information.
*/


package dap4.d4ts;

import dap4.core.util.DapException;
import dap4.core.util.DapUtil;

/**
 * Define a URL map that assumes that there some prefix
 * of the url is replaced by a path prefix and that everything
 * else is the same.
 * The mapping is carried out from a properties file
 * that has lines of the form <url path prefix>=<file path prefix>
 */
public class URLMapDefault implements URLMap
{
    //////////////////////////////////////////////////
    // Type Decls

    public class Entry implements Comparable<String> {
	protected String urlprefix;
	protected String fileprefix;
	public Entry() {}
	public String urlPrefix() {return urlprefix;}    
	public String filePrefix() {return fileprefix;}    
	public void set(String urlprefix, String fileprefix)
	{this.urlprefix = urlprefix; this.fileprefix=fileprefix;}
	public String filePrefix() {return fileprefix;}    
	public boolean compareTo(String s)
        {
	    return this.urlprefix.compareTo(s);
        }
    }

    //////////////////////////////////////////////////
    // Instance Variables

    List<Entry> entries = new ArrayList<Entry>();

   
    //////////////////////////////////////////////////
    // Constructor(s)

    public URLMapDefault(String urlprefix, String pathprefix)
    {
        this.urlprefix = urlprefix;
        pathprefix = pathprefix.replace('\\', '/');
        pathprefix = DapUtil.canonicalpath(pathprefix, false);
        this.pathprefix = pathprefix;
    }

    //////////////////////////////////////////////////
    // Accessors

    public void addEntry(String urlprefix, String pathprefix)
    {
	boolean exists = false;
	Entry e = null;
	for(e: entries) {
	    if(e.urlPrefix.equals(urlprefix)) {exists = true; break;}
	}
	if(!exists) {
	    e = new Entry();
	    entries.add(e);
	}
	e.set(urlprefix,pathprefix);
	entries.sort()
    }

    //////////////////////////////////////////////////
    // File loader


    //////////////////////////////////////////////////
    // URLMap API

    public String
    mapURL(String url)
        throws DapException
    {
        if(!url.startsWith(urlprefix))
            throw new DapException("URL not mappable: " + url);
        String suffix = url.substring(urlprefix.length(), url.length());
        while(suffix.charAt(0) == '/')
            suffix = suffix.substring(1);
        return pathprefix + "/" + suffix;
    }

    public String
    mapPath(String path)
        throws DapException
    {
        path = DapUtil.canonicalpath(path, false);
        if(!path.startsWith(pathprefix))
            throw new DapException("Path not mappable: " + path);
        String suffix = path.substring(pathprefix.length(), path.length());
        while(suffix.charAt(0) == '/')
            suffix = suffix.substring(1);
        return urlprefix + "/" + suffix;
    }

}

